{
  "news": [
    {
      "title": "Moving Design Beyond Pictures",
      "link": "https://blog.angular.io/moving-design-beyond-pictures-1509c315f94e?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/1509c315f94e"
      },
      "category": [
        "prototyping",
        "angular",
        "ux-design",
        "design-process",
        "web-development"
      ],
      "creator": "Blair Metcalf",
      "pubDate": "Wed, 06 Jun 2018 22:26:30 GMT",
      "updated": "2018-06-06T22:26:30.766Z",
      "encoded": "<p><em>Quickly create real Angular prototypes without writing code.<\/em><\/p><p>Designers put a lot of time into designing components and features for their products, however there often still remains a gap between a designer’s vision and a developer’s reality.<\/p><p><em>“An author can write a book. A musician can compose a song, an animator can compose a short, a painter can compose a painting. But most dynamic artists cannot realize their own creations, and this breaks my heart.”<\/em> — Bret Victor in <a href=\"http://worrydream.com/DynamicPicturesMotivation/\">Dynamic Pictures<\/a><\/p><h3>We want to change that… soon<\/h3><p>We are a team of UX Engineers at Google that is partnering with Angular on their <a href=\"https://www.youtube.com/watch?v=LP-fNM8OITI\">Angular for Designers initiative<\/a>. While a public launch is still months away, we have begun building a WYSIWYG prototyping tool that allows designers to use Angular components to create realistic, data-driven prototypes.<\/p><p>Many articles have been written about <a href=\"https://medium.com/bridge-collection/modern-design-tools-adaptive-layouts-e236070856e3\">the unresponsive nature of current design tools<\/a> that <a href=\"https://medium.com/bridge-collection/modern-design-tools-using-real-data-62d499e97482\">lack real data<\/a>; designers are not able to work in a medium that feels like their final product. Instead, designers are limited to creating static mockups that don’t convey experiences well and are often on their own if they want to build a more interactive prototype.<\/p><p>Designers are ready for a dynamic, data-driven way of working and the web is capable of delivering the tools they want. The tools we use shape our thoughts and define the limit of what’s possible. Change the tools and change our thinking.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Zj3oY19h-spFIddVpFu3uQ.gif\" /><figcaption><em>Quickly create a new page from a template, edit, and export code.<\/em><\/figcaption><\/figure><h3>Build together. Build to scale.<\/h3><p>We envision teams with more efficient communication between design and development. Because of the different mediums that designers and developers work in (mockups vs. code) communication does not happen naturally. However, in a world where a designer is able to assemble a page using the same components as a developer, they can now speak the same language.<\/p><p>Companies have invested in componentizing their design systems (think <a href=\"https://material.io/develop/\">Material<\/a> or <a href=\"https://vmware.github.io/clarity/\">Clarity<\/a>), and there is now a wealth of components that are readily available. Making all of these components accessible to designers will empower them to work from a single source of truth with their developers. This will greatly help improve consistency and quality as a product or company scales.<\/p><h3>A day in the life of the prototyping tool<\/h3><p>Imagine Dan the designer has a prototype where he has used a table component across 50 different screens. After getting user feedback on the design, Dan decides he wants to allow users to optionally hide columns in a table. Dan talks to Emma the engineer who is able to add the hide column feature to the component. Once Emma pushes her update, Dan opens his project and sees that the new feature is working in the table component across all 50 of his screens!<\/p><p>After Dan has finished his design, he sends a link to Stacey the stakeholder. She opens a preview of the prototype and clicks through each stage of the workflow. Because the prototype is built with real components and real data, she is able to get a very good sense of what the final outcome will be and gives an enthusiastic approval. Emma opens Dan’s project and is able to export an Angular template for each page in the prototype to get a jump-start on the front-end work that will be needed.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*tumO5lDKtTBU_i2Eh0imTQ.gif\" /><figcaption><em>Use spreadsheets to quickly populate your components with real data.<\/em><\/figcaption><\/figure><h3>Let’s make it better, together.<\/h3><p>We aren’t ready to share the tool yet, but we would love to gather your thoughts on the usefulness of this idea. If you have a few minutes, please fill out <a href=\"https://goo.gl/forms/I7M9N5qkYFuXytXF2\">this survey<\/a>, so we can improve it.<\/p><h3>Join our growing team!<\/h3><p>This is just the beginning and our team is growing quickly! We are hiring talented engineers to make a big impact on the lives of design system creators and users. If you are looking for a challenge and want to help us make this a reality, we would love to talk with you! <a href=\"https://careers.google.com/jobs#!t=jo&amp;jid=/google/ux-engineer-front-end-google-seattle-parkview-601-n-34th-st-3952380039&amp;\">Join our team!<\/a><\/p><p><em>— <\/em><a href=\"http://medium.com/@tim.sawyer\"><em>Tim Sawyer<\/em><\/a><em> and Blair Metcalf<\/em><\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1509c315f94e\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/moving-design-beyond-pictures-1509c315f94e\">Moving Design Beyond Pictures<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Version 6 of Angular Now Available",
      "link": "https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/cc56b0efa7a4"
      },
      "category": [
        "web-development",
        "angular",
        "release-notes",
        "front-end-development",
        "software-development"
      ],
      "creator": "Stephen Fluin",
      "pubDate": "Thu, 03 May 2018 22:04:36 GMT",
      "updated": "2018-07-02T17:10:44.908Z",
      "encoded": "<p>The 6.0.0 release of Angular is here! This is a major release focused less on the underlying framework, and more on the toolchain and on making it easier to move quickly with Angular in the future.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*V3Kfghg_jIV0ubxmAnCXBA.jpeg\" /><figcaption>a photo by Manu Murthy of the Angular Team<\/figcaption><\/figure><p>As a part of this release, we are synchronizing the major versions going forward for the framework packages (@angular/core, @angular/common, @angular/compiler, etc), the Angular CLI, and Angular Material + CDK. All are releasing as 6.0.0 today. We made this change to clarify cross compatibility. The minor and patch releases for these projects will be issued based on the project’s needs.<\/p><p>See the full list of changes in our changelogs: <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">framework<\/a>, <a href=\"https://github.com/angular/material2/blob/master/CHANGELOG.md\">material+cdk<\/a>, <a href=\"https://github.com/angular/angular-cli/releases\">cli<\/a>.<\/p><h3>ng update<\/h3><p>ng update &lt;package&gt; is a new CLI command that analyzes your package.json and uses its knowledge of Angular to recommend updates to your application. To see it in action, check out our <a href=\"https://update.angular.io\">update guide<\/a>.<\/p><p>Not only will ng update help you adopt the right version of dependencies, and keep your dependencies in sync, but 3rd parties can provide update scripts using <a href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\">schematics<\/a>. If one of your dependencies provides an ng update schematic, they can automatically update your code when they need to make breaking changes!<\/p><p>ng update will not replace your package manager, but uses npm or yarn under the hood to manage dependencies. In addition to updating dependencies and peer dependencies, ng update will apply needed transforms to your project.<\/p><p>For example, the command ng update @angular/core will update all of the Angular framework packages as well as RxJS and TypeScript, and will run any schematics available on these packages to keep you up to date. As part of this one command, we’ll automatically install rxjs-compat into your application to make the adoption of RxJS v6 smoother.<\/p><p>We expect to see many more libraries and packages add ng update schematics over the coming months, and have already heard from enterprise component library teams that are planning to use ng update to push through important changes in an automated way to save their developers time.<\/p><p>Learn more about <a href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\">how the <\/a><a href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\">ng update command works<\/a>. To get started creating your own ng update schematic, take a look at the entry in the <a href=\"https://github.com/ReactiveX/rxjs/blob/8c5d680494a8bc986e638f6138447917c7ba180f/package.json#L231-L233\">package.json of rxjs<\/a> and its associated <a href=\"https://github.com/ReactiveX/rxjs/blob/master/migrations/collection.json\">collection.json<\/a>.<\/p><h3>ng add<\/h3><p>Another new CLI command ng add &lt;package&gt; makes adding new capabilities to your project easy. ng add will use your package manager to download new dependencies and invoke an installation script (implemented as a schematic) which can update your project with configuration changes, add additional dependencies (e.g. polyfills), or scaffold package-specific initialization code.<\/p><p>Try out some of the following on your fresh ng new application:<\/p><ul><li><strong>ng add @angular/pwa<\/strong> — Turn your application into a PWA by adding an app manifest and service worker<\/li><li><strong>ng add @ng-bootstrap/schematics<\/strong> — Add <a href=\"https://ng-bootstrap.github.io/\">ng-bootstrap<\/a> to your application<\/li><li><strong>ng add @angular/material<\/strong> — Install and setup Angular Material and theming and register new starter components into ng generate<\/li><li><strong>ng add @clr/angular<\/strong> — Install and setup Clarity from VMWare<\/li><li><strong>ng add @angular/elements<\/strong> — Add the needed document-register-element.js polyfill and dependencies for Angular Elements (see below)<\/li><\/ul><p>Because ng add is built on top of schematics and the npm registry, our hope is that libraries and the community will help us build a rich ecosystem of ng add supporting packages.<\/p><p>Take a look at <a href=\"https://github.com/angular/material2/blob/master/src/lib/schematics/collection.json\">Angular Material’s ng-add schematic<\/a> for an example to help you get started building your own ng-add schematics.<\/p><h3>Angular Elements<\/h3><p>The first release of Angular Elements is focused on allowing you to bootstrap Angular components within an existing Angular application by registering them as Custom Elements. We use this extensively in angular.io as part of our content management system to allow dynamic bootstrapping of capabilities via embedded HTML. This replaces the need to manually bootstrap Angular components found in static html content.<\/p><p>Check out an <a href=\"https://stackblitz.com/edit/angular-f3nrpv?file=app%2Fapp.module.ts\">example of registering a component as a custom element<\/a> or <a href=\"https://angular.io/guide/elements\">learn more about Angular Elements<\/a>.<\/p><p>One of our community members has also produced an <a href=\"https://www.youtube.com/watch?v=4u9_kdkvTsc\">Angular Elements Quick Start<\/a> video that we highly recommend.<\/p><h3>Angular Material + CDK Components<\/h3><p>The biggest addition is the new tree component for displaying hierarchical data. Following patterns from the data-table component, the CDK houses the core tree directives, with Angular Material offering the same experience with Material Design styles on top. We recently gave a talk about the component, so check that out for more information (<a href=\"https://www.youtube.com/watch?v=s0Vy3sLbeyA\">video<\/a>, <a href=\"https://docs.google.com/presentation/d/1DmWdfr8j25owK2ac5qlt7oeX6HpxQnXEGwmHIjf6EHI\">slides<\/a>). These new tree components come in both styled (Material’s mat-tree) and unstyled versions (CDK’s cdk-tree).<\/p><p>Alongside the tree, we also have new <a href=\"https://material.angular.io/components/badge/overview\">badge<\/a> and <a href=\"https://material.angular.io/components/bottom-sheet/overview\">bottom-sheet components<\/a>. Badges help display small bits of helpful information, such as unread item counts. Bottom-sheets are a special type of mobile-centric dialogs that come up from the bottom of the viewport, commonly used to present a list of options following an action.<\/p><p>The @angular/cdk/overlay package is one of the most powerful pieces of infrastructure in the CDK today. With the release of v6, this package now includes<a href=\"https://material.angular.io/cdk/overlay/overview#position-strategies\"> new positioning logic<\/a> that helps make pop-ups that intelligently remain on-screen in all situations.<\/p><h3>Angular Material Starter Components<\/h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vD2u7I_a_uxs33qcdo2R6g.gif\" /><figcaption>ng generate for adding a dashboard to your project<\/figcaption><\/figure><p>Once you have run ng add @angular/material to add material to an existing application, you will also be able to generate 3 new starter components.<\/p><p>—<\/p><p><strong>Material Sidenav<\/strong><\/p><p>You can now generate a starter component including a toolbar with the app name and the side navigation. This component is responsive based on breakpoints.<\/p><p>Run:<\/p><p>ng generate @angular/material:material-nav --name=my-nav<\/p><p>This will create this starter component:<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PKi-6dOhlb61g8CM2JCx-Q.png\" /><figcaption>material-nav<\/figcaption><\/figure><p>—<\/p><p><strong>Material Dashboard<\/strong><\/p><p>You can now generate a starter dashboard component containing a dynamic grid list of cards.<\/p><p>Run:<\/p><p>ng generate @angular/material:material-dashboard --name=my-dashboard<\/p><p>This will create this starter component:<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*De1Vnm2m1yID_EL_xRYIyw.png\" /><figcaption>material-dashboard<\/figcaption><\/figure><p>—<\/p><p><strong>Material Data Table<\/strong><\/p><p>You can generate a starter data table component that is pre-configured with a datasource for sorting and pagination.<\/p><p>Run:<\/p><p>ng generate @angular/material:material-table --name=my-table<\/p><p>This will create this starter component:<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2MO1hno7d30iTPIZ9CnBzw.png\" /><figcaption>material-table<\/figcaption><\/figure><p>—<\/p><p><a href=\"http://material.angular.io/guide/schematics\">Learn more about the available Angular Material Schematics<\/a>.<\/p><h3>CLI Workspaces<\/h3><p>CLI v6 now has support for workspaces containing multiple projects, such as multiple applications or libraries. CLI projects will now use angular.json instead of .angular-cli.json for build and project configuration.<\/p><p>Each CLI workspace has projects, each project has targets, and each target can have configurations.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b60ed2058fac047dda80ac32d3a1676a/href\">https://medium.com/media/b60ed2058fac047dda80ac32d3a1676a/href<\/a><\/iframe><p><a href=\"https://github.com/angular/angular-cli/wiki/angular-workspace\">Learn more about the new configuration file<\/a><\/p><h3>Library Support<\/h3><p>One of the most requested features for our CLI has been support for creating and building libraries, and we are proud to introduce:<\/p><p>ng generate library &lt;name&gt;<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6uz18nxGzAtk5ftoDZv_iQ.gif\" /><figcaption>ng generate library within an existing project<\/figcaption><\/figure><p>This command will create a library project within your CLI workspace, and configure it for testing and for building.<\/p><p><a href=\"https://github.com/angular/angular-cli/wiki/stories-create-library\">Learn more about creating libraries with the Angular CLI<\/a><\/p><h3>Tree Shakable Providers<\/h3><p>To make your applications smaller, we’ve moved from modules referencing services to services referencing modules. This allows us to only bundle services into your code base in modules where they are injected.<\/p><p><strong>Before<\/strong><\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8b421b56fc3bf1b54d5281518b0f2fd4/href\">https://medium.com/media/8b421b56fc3bf1b54d5281518b0f2fd4/href<\/a><\/iframe><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ffe4d140446378b62589683c2b7e1cb7/href\">https://medium.com/media/ffe4d140446378b62589683c2b7e1cb7/href<\/a><\/iframe><p><strong>After<\/strong><\/p><p>No references are needed in our NgModule.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/87de693c7a8d23defb589c7c96b3d34f/href\">https://medium.com/media/87de693c7a8d23defb589c7c96b3d34f/href<\/a><\/iframe><p><a href=\"https://angular.io/guide/dependency-injection\">Read more about Dependency Injection<\/a><\/p><h3>Animations Performance Improvements<\/h3><p>We’ve updated our implementation of Animations to no longer need the <a href=\"https://angular.io/guide/browser-support#enabling-polyfills\">web animations polyfill<\/a>. This means that you can remove this polyfill from your application and save approximately 47KB of bundle size, while increasing animations performance in Safari at the same time.<\/p><h3>RxJS v6<\/h3><p>Angular has been updated to use v6 of RxJS. RxJS is an independent project that released v6 several weeks ago. RxJS v6 brings with it several major changes, along with a backwards compatibility package rxjs-compat that will keep your applications working.<\/p><p>RxJS has been rearranged to make it more tree-shakable, ensuring that only the pieces of RxJS that you use are included in your production bundles.<\/p><p>If you use ng update, your application should keep working, but you can <a href=\"https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md\">learn more about the 5.5 to 6.0 migration<\/a>.<\/p><h3>Long Term Support (LTS)<\/h3><p>We are expanding our Long Term Support to all major releases.<\/p><p>Previously we announced that only v4 and v6 would be LTS releases but in order to make updating from one major to the next easier, and give bigger projects more time to plan updates, we have decided to extend the long-term support to all major releases starting with v4.<\/p><p>Each major release will be supported for 18 months with around 6 months of active development followed by 12 months of critical bugfixes and security patches.<\/p><p>Learn more about how <a href=\"https://angular.io/guide/releases\">Angular versions and releases<\/a>.<\/p><h3>How to update to 6.0.0<\/h3><p>Visit <a href=\"https://update.angular.io\">update.angular.io<\/a> for information and guidance on updating your application.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/974/1*HDecs3czt3cTRMaDu9yo0w.png\" /><figcaption>https://update.angular.io<\/figcaption><\/figure><p>The update generally follows 3 steps, and will take advantage of the new ng update tool.<\/p><ol><li>Update @angular/cli<\/li><li>Update your Angular framework packages<\/li><li>Update other dependencies<\/li><\/ol><p>Making it easy for developers to stay up to date with the latest releases is extremely important to us, so let us know what you think about this release in the comments!<\/p><h3>What about Ivy?<\/h3><p><a href=\"https://youtu.be/dIxknqPOWms?t=1360\">At ng-conf we mentioned a new initiative called Ivy<\/a> — our next generation rendering pipeline. Ivy is currently under active development and is not part of the 6.0 release. We will announce an opt-in preview of Ivy as soon as it is ready in the coming months. Keep an eye on this blog for the latest information.<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cc56b0efa7a4\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4\">Version 6 of Angular Now Available<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Trip report from ng-conf 2018",
      "link": "https://blog.angular.io/trip-report-from-ng-conf-2018-1e8654053205?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/1e8654053205"
      },
      "category": [
        "web-development",
        "best-practices",
        "angular",
        "front-end-development",
        "software-development"
      ],
      "creator": "Stephen Fluin",
      "pubDate": "Mon, 30 Apr 2018 17:07:36 GMT",
      "updated": "2018-04-30T17:07:36.791Z",
      "encoded": "<p>A few of the Angular team members were able to attend and present at <a href=\"https://www.ng-conf.org\">ng-conf <\/a>this year. We owe a huge thank you to <a href=\"https://www.ng-conf.org/organizers/\">the organizers<\/a> for putting on such a great event.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pRDcMwidr9b2K9FIGfe6Xw.png\" /><\/figure><p>There were <strong>a lot<\/strong> of amazing sessions at ng-conf, and you can <a href=\"https://www.youtube.com/user/ngconfvideos/videos\">watch all of them<\/a> on YouTube. The only reason Angular is successful is because we have a great community that contributes to the ecosystem and shares their knowledge with the world.<\/p><p>Here’s a brief summary of what the Angular team shared this year.<\/p><h3>Day 1 Keynote<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FdIxknqPOWms%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdIxknqPOWms&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FdIxknqPOWms%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/aed994ea7b55e46bdef10aac88125f1b/href\">https://medium.com/media/aed994ea7b55e46bdef10aac88125f1b/href<\/a><\/iframe><p>In our Day 1 Keynote we reflected on the growth of our community, walked through some of the improvements coming to Angular with our upcoming v6 release, and gave a sneak peek to some of the things we are doing under the hood with <a href=\"http://ivy.angular.io/\">Ivy<\/a>.<\/p><h3>5 must-dos to make your JS app search friendly (#7 will shock you!)<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FfiT5g9KSxmw%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfiT5g9KSxmw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfiT5g9KSxmw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9d4ba9e9a31cd8eb4a4f38bd62ba2959/href\">https://medium.com/media/9d4ba9e9a31cd8eb4a4f38bd62ba2959/href<\/a><\/iframe><p>We hold <a href=\"https://angular.io\">https://angular.io<\/a> up as an example of an Angular application that demonstrates and acts as a testing ground for many of our recommended best practices, including being search friendly without server side rendering.<\/p><p>In this talk we cover some of the things we’ve learned from our successes and our mistakes.<\/p><h3>Angular CDK and Material in 2018<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fv__RuD9RX3I%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dv__RuD9RX3I&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fv__RuD9RX3I%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7103ce5c6122e6b85dc223840c8a5e95/href\">https://medium.com/media/7103ce5c6122e6b85dc223840c8a5e95/href<\/a><\/iframe><p>Angular Material and the CDK were built to make it easy to build great looking and great feeling applications more quickly. Watch as we live-code an application using some of the new components coming in v6, as well as some of the new schematics we have built to help you use Material.<\/p><h3>Elements in v6 and Beyond<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FZ1gLFPLVJjY%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZ1gLFPLVJjY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FZ1gLFPLVJjY%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bb92f0b92a68c666d5375bfe62c3ef5f/href\">https://medium.com/media/bb92f0b92a68c666d5375bfe62c3ef5f/href<\/a><\/iframe><p>Angular Elements is one of the most asked about features coming to Angular. We break down what Angular Elements will look like in the future, and we break down how we use Angular Elements on angular.io.<\/p><h3>Testing Best Practices for Angular Applications<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FHJ7Zxkz6iJ0%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DHJ7Zxkz6iJ0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FHJ7Zxkz6iJ0%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e4e27edcc757ca4ce83616a24247ed76/href\">https://medium.com/media/e4e27edcc757ca4ce83616a24247ed76/href<\/a><\/iframe><p>Working at Google and having worked with companies and organizations of all sizes, we’ve seen the productivity and agility gains that can come from implementing testing as part of a standard workflow.<\/p><p>In this talk, we cover best practices such as using async/await, fakeAsync, and the HttpTestingController.<\/p><h3>Global Thermonuclear Templates<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fy6uSJ4a5sMA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dy6uSJ4a5sMA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fy6uSJ4a5sMA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1461e4a18890b1999370bbf7eb8f1680/href\">https://medium.com/media/1461e4a18890b1999370bbf7eb8f1680/href<\/a><\/iframe><p>Schematics empower library and tooling authors to move quickly and stay up to date. We live code a new schematic that is able to make changes to your project. Schematics are used under the hood for many CLI commands such as ng add, ng generate, or ng update.<\/p><h3>Hands-on Full-Stack development with Nx and Bazel<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F1KDDIhcQORM%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D1KDDIhcQORM&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F1KDDIhcQORM%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3572a162343cab2aa2aaff80560baf71/href\">https://medium.com/media/3572a162343cab2aa2aaff80560baf71/href<\/a><\/iframe><p>Bazel is the build system that Google and the Angular team use to keep incremental builds under 2 seconds. We use live coding and live building to demonstrate how you can use Nx and Bazel and to show state of the art tooling that will allow you to perform fast distributed incremental builds of Angular applications and libraries.<\/p><h3>Day 3 Keynote<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FN15ie0cGuB0%3Fstart%3D854%26feature%3Doembed%26start%3D854&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DN15ie0cGuB0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FN15ie0cGuB0%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/96bd3ef4b7f43795b9bb301c3ddb69bb/href\">https://medium.com/media/96bd3ef4b7f43795b9bb301c3ddb69bb/href<\/a><\/iframe><p>The Angular team receives many questions about when and where developers should be using many of the capabilities that are present in Angular. We break down some of the most common questions to help you decide.<\/p><h3>Angular Material’s Trees<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fs0Vy3sLbeyA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Ds0Vy3sLbeyA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fs0Vy3sLbeyA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0f77378c2a930dd5adf7c89e86e9b771/href\">https://medium.com/media/0f77378c2a930dd5adf7c89e86e9b771/href<\/a><\/iframe><p>Tree components are coming to Angular Material and the CDK in v6. We show you how to take advantage of them, and some of the trade offs between nested trees and flat trees.<\/p><h3>Introducing RxJS6<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FJCXZhe6KsxQ%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJCXZhe6KsxQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FJCXZhe6KsxQ%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d892cbb57e5e8e503937db649446ff38/href\">https://medium.com/media/d892cbb57e5e8e503937db649446ff38/href<\/a><\/iframe><p>RxJS v6 was recently released alongside a new compatibility package rxjs-compat. Learn about the changes in v6 and how to keep your application small, maintainable, and in sync with the latest best practices.<\/p><h3><strong>Strategies for Server Side Rendering Angular Applications<\/strong><\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F-8bObydfINA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-8bObydfINA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F-8bObydfINA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/612f3ba619181b09a1b3d8e6c16251db/href\">https://medium.com/media/612f3ba619181b09a1b3d8e6c16251db/href<\/a><\/iframe><p>We provide an update on Angular Universal, walk through the ways Universal interacts with other projects such as Angular Elements, and cover a simple store example to break down the use of Angular Universal further.<\/p><h3>Angular for Designers<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLP-fNM8OITI%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLP-fNM8OITI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLP-fNM8OITI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/652a7a5012f2dd211d80fd3146d8711e/href\">https://medium.com/media/652a7a5012f2dd211d80fd3146d8711e/href<\/a><\/iframe><p>The Angular team is looking for ways to further empower designers. We’re considering many different initiatives and approaches that could improve the collaboration between designers and developers.<\/p><p>We’d love more feedback about these initiatives, so please <a href=\"https://twitter.com/stephenfluin\">message me<\/a> if you have thoughts or ideas or projects.<\/p><h3>Angular Panel<\/h3><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmMoWYiv5ofc%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmMoWYiv5ofc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FmMoWYiv5ofc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9fdb6297600e85b185fe90279fc5e048/href\">https://medium.com/media/9fdb6297600e85b185fe90279fc5e048/href<\/a><\/iframe><p>As usual, we ended the event with a full team live Q&amp;A with the audience. We cover topics like versioning, LTS, community involvement, and the future of Angular.<\/p><p>—<\/p><p>Thanks again to everyone that came and sat with us at ng-conf!<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1e8654053205\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/trip-report-from-ng-conf-2018-1e8654053205\">Trip report from ng-conf 2018<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Top 3 Things Charter Learned About Reusable Designs and Components",
      "link": "https://blog.angular.io/top-3-things-charter-learned-about-reusable-designs-and-components-dd367de32122?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/dd367de32122"
      },
      "category": [
        "javascript",
        "software-development",
        "software-engineering",
        "web-development",
        "components"
      ],
      "creator": "Geoffrey Cullins",
      "pubDate": "Fri, 13 Apr 2018 21:10:57 GMT",
      "updated": "2018-04-13T21:10:57.444Z",
      "encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*b2NgEK3hFqecl0A1.\" /><\/figure><p>This is a guest post by Geoffrey Cullins, Sr. Director, Portal App Development at Charter Communications.<\/p><p>Modern web app development is complicated. Even when you go it alone, you’re faced with innumerable decisions. Which libraries and frameworks will you choose? How will you structure your code? What syntax rules will you follow? How will you build and deploy the app?<\/p><p>Oh, yeah, you also need to design it. For a browser on a desktop machine. And a tablet. And a phone. Lot’s of different types of phones, actually. Don’t forget about accessibility. Oh, and SEO. And so on…<\/p><p>We’re not usually a lone wolf, however. We work as cross-functional teams including design, product, engineering, test, dev ops, etc., and adding more cooks to the kitchen isn’t a recipe for reduced complexity. Throw in more than one app and, well…you get the picture.<\/p><p>At Charter, we develop and support over 100 independent applications across our entire organization. In addition to browser-based web apps, we also build native applications for phones (e.g. Android &amp; iOS), set-top boxes (the interface on your cable box), and 3rd party devices (e.g. smart TVs, video streaming devices, gaming consoles, etc.). When you consider all of the people involved in designing, defining, and developing such a large, collective effort, it quickly becomes clear that you need a systematic way of injecting some sanity. Otherwise, things could spiral into a disjointed, inconsistent, and confusing experience for your development teams and, most importantly, your end users.<\/p><p>We needed ways to maintain design and functional consistency while reducing redundant effort. The tools we added to our toolbox needed to support those overarching goals with the least amount of overhead and maintenance. To answer the challenge, we’ve implemented solutions that maintain consistency and reusability for every step of the SDLC, while remaining flexible so the dev teams can make the technology choices that are the best fit for their needs. For our Account and Support web applications we chose Angular, with all of the benefits it gives us out-of-the-box that enable us to best leverage our approach to reusability and scalability.<\/p><h3>What problems are we trying to solve, and what solutions have we implemented (so far)?<\/h3><p><strong>Problem:<\/strong> How do we maintain consistency of UI/UX design across many applications?<\/p><p><strong>Solution:<\/strong> Produce a UI/UX design component system to serve as the ancestral source of visual elements that are included in consuming applications.<\/p><h3>Let’s go fly a kite!<\/h3><p>Kite is the UI/UX design component system we developed that helps the application teams stay aligned. While not revolutionary, we took an established pattern and tweaked it to make it more flexible and available for an unknown variety of applications. The following image illustrates Kite at a high level:<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tdZxm7fB-K6L5iff.\" /><figcaption>Kite UI/UX Design Component System<\/figcaption><\/figure><p>Design components are created and published using vanilla JavaScript. These are then ported to framework-specific, shareable components that rely on the ancestral vanilla implementation for future changes.<\/p><h3>But, porting takes a long time, right?<\/h3><p>In our case, Angular made the consumption and exposure of these a breeze. We rely heavily on Angular’s opinionated structure of modules and components to produce easily consumable and composable elements with predictable look and behavior. It allows us to directly instantiate our vanilla implementations and then sprinkle some Angular dust on top to enable things like transclusion and importing specific CSS requirements, while getting the benefit of any bug fixes made in the future to the vanilla implementation.<\/p><p><strong>Problem:<\/strong> How do we reduce duplicate efforts for similar cross-application business requirements across separate, unique applications?<\/p><p><strong>Solution:<\/strong> Identify similar requirements during the design and definition stage, and build shareable components in a way that accommodates the unique use cases.<\/p><p>For example, multiple web apps use exactly the same header treatment, except for the logo and some copy. In another example, all web apps use essentially the same modal, but with variable copy, buttons/actions, forms, etc. More complex shareable components contain other, smaller shareable elements, such as buttons, form elements, pop-up help, etc.<\/p><p>Leveraging Angular’s directives and dependency injection features, and adhering to Angular’s well documented and widely adopted best practices for application structure, enables us to build highly flexible, independent components that can accommodate differences between use cases while maintaining consistency for core look, feel, and functionality. Used in conjunction with our Kite design system, we have created a library of consistent, composable components that are available for consumption by any Angular applications we build and deploy to production, whether they’re customer-facing or for internal use.<\/p><p><strong>Problem:<\/strong> How do we force the separation of application-specific business rule logic from visual component UI/UX code?<\/p><p><strong>Problem:<\/strong> How to maintain consistent application of best practices and overall architecture across many distinct business applications?<\/p><p><strong>Solution:<\/strong> Both of the above problems are solved, in-part, by our move to a monorepo for source control of both larger applications as well as shared componentry.<\/p><p>In order for an application or shared component to be included in the monorepo, it needs to adhere to the standards established by Angular’s documented best practices. We make heavy use of linting rules, robust documentation, and automation during the code review and deployment process to keep ourselves in-check.<\/p><h3>So, what’s next?<\/h3><p>The approaches we’ve take up to this point have had a big impact on the speed of development and quality of the web applications on which we work. But, there’s still a lot we can do to get even better. Some open problems and potential solutions on our plates include:<\/p><p><strong>Problem:<\/strong> How do we expose shared components to consuming applications that live outside of the monorepo?<\/p><p><strong>Proposed solutions:<\/strong><\/p><ol><li>Automate the export of component distribution files to a separate repository for consuming applications to add as a dependency of their own;<\/li><li>Evangelize the monorepo, with the goal of encouraging more teams to migrate their applications into it.<\/li><\/ol><p><strong>Problem:<\/strong> How do we steamline change management for shared components (i.e. what needs to be done, who will do it, how will it be communicated, how will it be tested, how will it be consumed, etc.)?<\/p><p><strong>Proposed solutions:<\/strong><\/p><ol><li>Automated pipeline jobs that run unit tests of any component-consumers that also live within the monorepo;<\/li><li>Automated pipeline jobs that create test tickets for any component-consumers that also live within the monorepo;<\/li><li>PR/MR reviews by a select group of senior-level Engineers;<\/li><li>Specific distribution lists to which changes will be communicated.<\/li><\/ol><p><strong>Problem:<\/strong> How do we manage the flow of updates for shared dependencies/components?<\/p><p><strong>Proposed solutions:<\/strong><\/p><ol><li>Each shared component should be treated as a mini Angular application with its own set of dependencies that need to be recognized by consumers (both within and without monorepo);<\/li><li>Regularly scheduled “patch” (update) days to make releases predictable.<\/li><\/ol><h3>What do you think?<\/h3><p>We know there is a long road ahead to keep refining and improving, and would love to hear from you! What are your approaches? What do you think of ours? What are challenges you’re facing for which you haven’t found a solution that’s “just right?” Let us know in a comment on this post!<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dd367de32122\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/top-3-things-charter-learned-about-reusable-designs-and-components-dd367de32122\">Top 3 Things Charter Learned About Reusable Designs and Components<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Trip report from ngAtlanta: Angular’s Roadmap, Inclusion, and more",
      "link": "https://blog.angular.io/trip-report-from-ngatlanta-angulars-roadmap-inclusion-and-more-b6c8bae85417?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/b6c8bae85417"
      },
      "category": [
        "front-end-development",
        "javascript",
        "diversity",
        "angular",
        "web-development"
      ],
      "creator": "Brad Green",
      "pubDate": "Thu, 22 Feb 2018 19:17:11 GMT",
      "updated": "2018-02-22T20:22:31.076Z",
      "encoded": "<p>Last month I had the opportunity to speak at the <a href=\"http://ng-atl.org/\">ngAtlanta conference<\/a> where I covered major parts of Angular’s 2018 roadmap and shared what I think is an interesting research-based rationale for focusing on diversity and inclusion as a strategy for productivity. You can check out <a href=\"https://docs.google.com/presentation/d/1qY6rmpppPYitEWH24VqF9Tt0dssHgqZQWzwut_qo52U/edit#slide=id.p\">the slides<\/a> or watch my entire <a href=\"https://www.youtube.com/watch?v=tzUVBoZ2qgw\">talk on YouTube<\/a>.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1xXgj8sqRdLDqOLOsoZnxA.jpeg\" /><figcaption>Speakers at ngAtlanta<\/figcaption><\/figure><p>I’m frequently impressed with the imagination and quality of conferences in the Angular community, but I think Zack Chapple and the rest of the conference team set a new bar on diversity with women making up over 60% of the speakers and with other diversity aspects well represented. Beyond the speaker diversity, the show had amazing content and I had great conversations with Angular developers from all around the world.<\/p><h3>Feature Roadmap<\/h3><p>Meta-points aside, here’s a few of the upcoming features I covered in our roadmap.<\/p><p><strong>Bazel<\/strong>. Every developer at Google gets to use a consistently fast, reliable, multi-language build tool that is offered as an open source tool called Bazel. We’ve been working with the Bazel team on making this an option for Angular developers to get the same benefits. We’re now building Angular itself using Bazel and there are several early-adopters now starting to use it with their Angular apps. Complete details at <a href=\"https://g.co/ng/abc\">g.co/ng/abc<\/a>.<\/p><p><strong>Schematics and <\/strong><strong>ng update.<\/strong> We built the Angular CLI on a core technology called Schematics that lets anyone define custom templates and code transformations for use with the CLI. We’re shipping a new Schematics-based feature in CLI v1.7 called ng update that automatically updates your project dependencies and makes automated version fixes. With Schematics, you don’t have to wait for the CLI team to come up with features and you can build your own code transformations like ng update. Find out how in the <a href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\">Schematics blog post<\/a>.<\/p><p><strong>Component Dev Kit.<\/strong> We offer a complete set of accessible, high performance, feature-rich components in the Angular Material library. But what if you don’t use Material or you want a head start in building other components not offered there? This is where the CDK comes in. Providing the core functions we’ve used to build Angular Material, you can now create your own components using our battle-tested feature sets for accessibility, i18n, RTL, overlays, and much more. Check out the <a href=\"https://blog.angular.io/a-component-dev-kit-for-angular-9f06e3b4b3b4\">CDK blog post<\/a> for how to get started.<\/p><p><strong>Angular Elements.<\/strong> Want to let others embed your Angular components or even full apps in other apps written in vanilla JS or any other framework? Then you might like Angular Elements which lets you publish Angular components as Web Components that can be used anywhere. This is still in development, but we’re already using it on angular.io to make dynamic rendering easier. Check out <a href=\"https://www.youtube.com/watch?v=vHI5C-9vH-E\">Rob Wormald’s talk<\/a> and this other <a href=\"https://medium.com/vincent-ogloblinsky/export-angular-components-as-custom-elements-with-angular-elements-a2a0bfcd7f8a\">Medium post<\/a> for full project goals and details.<\/p><p><strong>Ivy Renderer.<\/strong> Love Angular but just wish it was smaller, easier to debug, and compiled faster? These are our goals with Angular’s new renderer code-named Ivy. Its coming as a non-breaking change so you’ll get it automatically in a future release by just staying on Angular’s latest releases (which should be a breeze with ng update). We’ve got a ways to go, but we’re hopeful developers will be able to opt-in to a preview in the first half of this year. You can track our progress at <a href=\"http://ivy.angular.io\">ivy.angular.io<\/a>.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5_9quY7GKJf-VJNuhZSaeQ.png\" /><figcaption>Ivy Renderer Goals<\/figcaption><\/figure><p><strong>And more!<\/strong> Beyond these features, you can track all that we’re aiming for in our next release of Angular in our <a href=\"http://v6.angular.io\">milestones on GitHub<\/a>.<\/p><h3>Final Thoughts<\/h3><p>The Angular team values applications users love to use, applications developers love to build, and a community where everyone feels welcome. I hope that ngAtlanta set a new standard for making everyone feel welcome with their emphasis on diversity and inclusiveness and that this is something everyone just ends up expecting as a given.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Yyn8MuKGU29U8dUKB1JB5A.jpeg\" /><figcaption>Back of the packed room at ngAtlanta<\/figcaption><\/figure><p>If you go to conferences this year that aren’t doing quite as well as ngAtlanta did in diversity, I urge you to send a message to the conference organizers pointing at ngAtlanta’s success as a beacon of what’s possible. And if they don’t get the message for future conferences, vote with your feet and go to conferences that do.<\/p><p>I know that I will.<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b6c8bae85417\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/trip-report-from-ngatlanta-angulars-roadmap-inclusion-and-more-b6c8bae85417\">Trip report from ngAtlanta: Angular’s Roadmap, Inclusion, and more<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Run Angular CLI repos directly in your browser",
      "link": "https://blog.angular.io/run-angular-cli-repos-directly-in-your-browser-41332fd80901?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/41332fd80901"
      },
      "category": [
        "angular",
        "stackblitz",
        "javascript",
        "github",
        "web-development"
      ],
      "creator": "Eric Simons",
      "pubDate": "Fri, 09 Feb 2018 19:59:56 GMT",
      "updated": "2018-02-09T19:59:56.790Z",
      "encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/1*EW07dRc_lW0tzvyogtoRFQ.png\" /><\/figure><p>Github is the source of truth for most Angular demos, examples, prototypes, and “<a href=\"https://realworld.io\">real world<\/a>” projects. However, downloading &amp; initializing these projects locally can take a <em>looooong<\/em> time- which makes them difficult to share with others. 😞<\/p><p>This is precisely why we created <a href=\"https://stackblitz.com\">StackBlitz<\/a>, a lightning fast online IDE that allows you to live edit Angular CLI projects in-browser. It also now powers all of the <a href=\"https://twitter.com/ericsimons40/status/956316183703183360\">official Angular.io documentation examples<\/a>!<\/p><p>Wouldn’t it be great if you could instantly run any Angular CLI project on Github directly inside StackBlitz<strong> by simply changing the URL<\/strong>? 😎<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/630/1*OQnI9H2upJP177PvSXVe4g.gif\" /><\/figure><p>Yup, it’s seriously that easy. And it makes the process of sharing examples, demos, and apps a total breeze. 🙌<\/p><p>See it live in action with these repos below:<\/p><ul><li><a href=\"https://stackblitz.com/github/aveferrum/angular-material-demo\">StackBlitz<\/a><\/li><li><a href=\"https://stackblitz.com/github/gothinkster/angular-realworld-example-app\">StackBlitz<\/a><\/li><\/ul><h3>How it works ⚙<\/h3><p>You can run any public repo on Github by providing the username + repo name like so:<\/p><p><strong>stackblitz.com/github/{GH_USERNAME}/{REPO_NAME}<\/strong><\/p><p>And you can also optionally specify a branch, tag, or commit:<\/p><p><strong>.../github/{GH_USERNAME}/{REPO_NAME}/tree/{TAG|BRANCH|COMMIT}<\/strong><\/p><h4>Automatically stays in sync with your repo 🔄<\/h4><p>Whenever you push commits to Github, the corresponding StackBlitz project automatically updates with the latest changes — ensuring Github remains your code’s source of truth.<\/p><h4>Boots up in mere seconds ⚡️<\/h4><p>No more downloading, cloning, or installing. Thanks to the blazing fast <a href=\"https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403\">Turbo package manager<\/a>, StackBlitz can install all of your app’s dependencies &amp; boot in mere seconds.<\/p><h4>Live edit code in a real environment 🛠<\/h4><p>StackBlitz comes out of the box with all of the functionality you’d expect in your local VS Code environment like intellisense, go to definition, hot reloading, full access to npm, and <a href=\"https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4\">much, much more<\/a>.<\/p><h3>Now in beta!<\/h3><p>We’d love to hear your feedback on this feature! Today this functionality is probably best suited for smaller apps &amp; examples as we hammer out remaining implementation details, but if you find anything that’s not working as expected please don’t hesitate to file an <a href=\"https://github.com/stackblitz/core\">issue on Github<\/a>, chat with us in our <a href=\"https://discord.gg/stackblitz\">Discord channel<\/a>, or tweet us @<a href=\"https://twitter.com/stackblitz\">stackblitz<\/a>. Code on! 🤘🍻<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41332fd80901\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/run-angular-cli-repos-directly-in-your-browser-41332fd80901\">Run Angular CLI repos directly in your browser<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "File uploads come to AngularFire",
      "link": "https://blog.angular.io/file-uploads-come-to-angularfire-6842352b3b47?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/6842352b3b47"
      },
      "category": [
        "firebase",
        "angular",
        "web-development",
        "angularfire",
        "google-cloud-storage"
      ],
      "creator": "David East",
      "pubDate": "Fri, 02 Feb 2018 15:25:37 GMT",
      "updated": "2018-02-02T15:25:37.906Z",
      "encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*Q7TzUZZ9bOZO7rQsbc6IGg.png\" /><\/figure><p><a href=\"https://firebase.google.com/products/storage/\">Cloud Storage for Firebase<\/a> is a serverless way to upload and download binary files straight from the browser. As of today, it’s officially supported by <a href=\"http://github.com/angular/angularfire2\">AngularFire<\/a>. Adding AngularFire to your app allows you to easily and securely manage a Cloud Storage bucket. All without a line of server code.<\/p><blockquote><strong>Get ready, uploading files from your Angular app just got a lot easier.<\/strong><\/blockquote><h3><strong>AngularFire, meet Cloud Storage<\/strong><\/h3><p>If you’re not familiar with <a href=\"http://github.com/angular/angularfire2\">AngularFire<\/a>, it’s the official Angular library for Firebase. AngularFire combines the power of Angular, Firebase, and RxJS to act as your serverless backend. It includes modules for the Realtime Database, Firebase Authentication, Cloud Firestore, and today it supports Cloud Storage.<\/p><p>Adding AngularFire to your project is easy. Install Firebase and AngularFire from npm:<\/p><pre>npm i firebase angularfire2<\/pre><p>Then add it to your NgModule:<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9f18f656e9f5d358801291e0b06042ce/href\">https://medium.com/media/9f18f656e9f5d358801291e0b06042ce/href<\/a><\/iframe><p>Inject the AngularFireStorage module into your component.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4b4b71d98326fe0bbc1e41144ce479f2/href\">https://medium.com/media/4b4b71d98326fe0bbc1e41144ce479f2/href<\/a><\/iframe><p>Now you’re ready to manage your files from Cloud Storage without a server of your own.<\/p><h3><strong>The foundation of a file upload<\/strong><\/h3><p>The primary way of uploading files on the web is through the &lt;input type=&quot;file&quot;&gt; tag.<\/p><pre>&lt;label for=&quot;file&quot;&gt;File:&lt;/label&gt;<br>&lt;input type=&quot;file&quot; (change)=&quot;upload($event)&quot; accept=&quot;.png,.jpg&quot; /&gt;<\/pre><p>This tag fires a (change) event when the user selects a file. It even allows you to restrict the user from uploading undesired formats with the accept attribute (beware that this is only a client restriction, we’ll cover server restrictions later). Event bindings in Angular make it easy to handle a (change) event and send the file to Cloud Storage.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/663b7e45031b4b8347895fe63258f007/href\">https://medium.com/media/663b7e45031b4b8347895fe63258f007/href<\/a><\/iframe><p>The sample above creates an AngularFireStorageReference with a randomly generated Id. This reference controls a path in your Cloud Storage bucket. Creating a reference doesn’t initiate an upload, but it allows to start one as well as delete the file saved at that location. Calling .put() on a reference with a Blob beings the upload to Cloud Storage.<\/p><blockquote>You may have noticed that creating a reference and calling .put() is the longer way of calling afStorage.upload(path, blog) shown above. Under the hood the afStorage.upload() method creates a reference, calls .put(), and returns the AngularFireUploadTask for you.<\/blockquote><p>The AngularFireUploadTask is how you’ll monitor the upload progress.<\/p><h3><strong>Reactive upload methods<\/strong><\/h3><p>The web platform provides an easy and accessible way of displaying the progress of any given task. This is done through the aptly named &lt;progress&gt; element.<\/p><pre>&lt;progress max=&quot;100&quot; [value]=&quot;(uploadProgress | async)&quot;&gt;&lt;/progress&gt;<\/pre><p>The progress element’s value attribute is easy to control with Angular’s property binding. AngularFire provides an upload observable that you can pipe in the new value as it changes.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/72d7561a9fbf4e92b593502a2cb59698/href\">https://medium.com/media/72d7561a9fbf4e92b593502a2cb59698/href<\/a><\/iframe><p>The .snapshotChanges() method on an AngularFireUploadTask returns an object with helpful metadata about the upload. Properties such as the totalBytesTransferred, totalBytes in the upload, any metadata provided, the state of the upload, and the downloadURL of the file once uploaded. Using this metadata you can update the UI to show the progress.<\/p><p>Most of the time your UI will display the upload percentage and download url. Since this a common task, we made this a bit easier with two helpful methods: .percentageChanges() and .downloadURL().<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/72a9d90f27ce22e064b9fbd0254e4761/href\">https://medium.com/media/72a9d90f27ce22e064b9fbd0254e4761/href<\/a><\/iframe><p>Instead of calculating the changes yourself, the .percentageChanges() observable does the work for you. The .downloadURL() observable emits the download URL string once the upload is completed. This simplifies binding this information to your UI.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/942575c08bac06f98bf12d9b728298da/href\">https://medium.com/media/942575c08bac06f98bf12d9b728298da/href<\/a><\/iframe><p>The best part of these observable methods is that you don’t need to worry about complex mapping or multiple .subscribe() calls in your component code. Just bind them to the async pipe and your users are watching their file upload progress.<\/p><p>But what if your user changes their mind? What if they want to pause their upload because they’re no longer on a WiFi network? Will they be able to resume when they want? What if they want to cancel the upload all together?<\/p><h3><strong>Controlling uploads<\/strong><\/h3><p>A user should be able to pause, resume, or cancel an upload in progress. If or when their upload completes they should be able to delete it as well.<\/p><p>An AngularFireUploadTask contains the following appropriately named methods: .pause(), .resume() , and .cancel() . In the sample above, the component stores the task as an instance property. This allows you to call it from your template:<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1718e298f0ece5f93c5e06c85f6f4299/href\">https://medium.com/media/1718e298f0ece5f93c5e06c85f6f4299/href<\/a><\/iframe><p>Ideally you’ll want to update your UI so the user knows the state of their upload. The .snapshotChanges() observable emits this information through the state property.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fb349debb9a8a764b69ec88b60914fdf/href\">https://medium.com/media/fb349debb9a8a764b69ec88b60914fdf/href<\/a><\/iframe><p>When the user taps “Pause”, the &#39;paused&#39; state emits from the observable. When the user taps “Resume”, the &#39;running&#39; state emits. And of course, when the “Pause” button is tapped, the &#39;paused&#39; state emits.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d742f7ec07dbf0b427bb0443fb44b2a4/href\">https://medium.com/media/d742f7ec07dbf0b427bb0443fb44b2a4/href<\/a><\/iframe><p>The template above will disable each button depending on the state. A user can cancel a &#39;running&#39; upload, but they can’t click “Resume” unless the state is &#39;paused&#39; .<\/p><p>Binding the UI to the upload state simplifies your templates because you don’t have to manage stateful properties on your component like: isPaused, isUploading, and isFinished. The state emits from the observable and you bind the expression in your template.<\/p><h4><strong>Simple downloads<\/strong><\/h4><p>Downloading files from Cloud Storage is real simple with AngularFireStorage. The .getDownloadURL() method on an AngularFireStorageReference returns an observable of a download URL.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4706f1ad622d07516e38e7e3801fbf51/href\">https://medium.com/media/4706f1ad622d07516e38e7e3801fbf51/href<\/a><\/iframe><p>Combining the .getDownloadURL() method with the *ngIf directive and async pipe allows you to display the image once it’s downloaded.<\/p><p>Just because uploading and downloading files is easy, it doesn’t mean we can’t secure them from unauthorized access.<\/p><h3><strong>Secure your files<\/strong><\/h3><p>Cloud Storage for Firebase comes with a server security rule set. These security rules ensures the proper file formats are uploaded and only the right users have access to the right files.<\/p><p>The &lt;input type=&quot;file&quot; access=&quot;.png,.jpg&quot;&gt; tag restricts file uploads to .png and .jpg. However, this a client only restriction. It has nothing to do with what Cloud Storage will accept. To secure your storage bucket you need to write rules that only allow images to be uploaded at the /images path.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c8e0f00909cb2d32ea8b1f0304f76474/href\">https://medium.com/media/c8e0f00909cb2d32ea8b1f0304f76474/href<\/a><\/iframe><p>The rules above will let anyone read from the /images path, but only upload a file if it has an &#39;image/.*&#39; content type (.png, .jpg, .jpeg, etc…) and is less than 5MB.<\/p><h3>Get started and even contribute!<\/h3><p>Get started by <a href=\"http://github.com/angular/angularfire2\">checking out our Github repo<\/a> and the <a href=\"https://firebase.google.com/docs/storage\">official documentation<\/a>. AngularFire and the Cloud Storage SDK are each <a href=\"https://github.com/firebase/firebase-js-sdk/\">open source projects<\/a>. If you want to get involved in the project make sure to check out our open issue or file one yourself!<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6842352b3b47\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/file-uploads-come-to-angularfire-6842352b3b47\">File uploads come to AngularFire<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Schematics — An Introduction",
      "link": "https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/dc1dfbc2a2b2"
      },
      "category": [
        "schematics",
        "javascript",
        "tools",
        "angular",
        "software-development"
      ],
      "creator": "Hans",
      "pubDate": "Wed, 31 Jan 2018 23:33:26 GMT",
      "updated": "2018-02-02T20:48:27.033Z",
      "encoded": "<p>Schematics is a workflow tool for the modern web; it can apply transforms to your project, such as create a new component, or updating your code to fix breaking changes in a dependency. Or maybe you want to add a new configuration option or framework to an existing project.<\/p><h3>Goals<\/h3><p>The mission of the Angular CLI is to improve your development productivity. We came to a point where we needed a more powerful and generic facility to support the CLI scaffolding, and we settled on 4 primary goals:<\/p><ol><li><strong>Ease of use and development.<\/strong> It had to have simple concepts for developers that were intuitive and feel natural. Also, the code developed needed to be synchronous to make it easier to develop.<\/li><li><strong>Extensibility and Reusability.<\/strong> By keeping reusability in mind, we were able to design a simple but powerful pipeable interface. Schematics can be added as the input, or the output of other Schematics. For example, an application can be created using components and modules schematics.<\/li><li><strong>Atomicity.<\/strong> We had many errors in the CLI blueprints that were the direct result of side effects by our blueprints. When we created Schematics, we decided to remove side effects entirely from our code. All the changes are recorded in memory, and only applied once they’re confirmed to be valid. For example, creating a file that already exist is an error, and would discard all the other changes applied so far.<\/li><li><strong>Asynchronicity.<\/strong> Many workflow are asynchronous in nature (e.g. accessing web servers), and so Schematics had to support those use cases. This seems in contradiction with the first goal of making the debugging process synchronous, but we came to a design that made everything work together. The input of a Schematics is synchronous, but the output can be asynchronous, and the library will wait for everything to be done before starting the next step. This way developers can reuse without even knowing that a Schematics is asynchronous.<\/li><\/ol><p>All the Schematics design decisions turned out around these 4 major goals. Schematics is the combined efforts to build a better workflow tool.<\/p><h3>Understanding Schematics<\/h3><p>In a schematic, you don’t actually perform any direct actions on the filesystem. Rather, you describe what transformation you would like to apply to a Tree. This allows us to support features like dry runs (or patch runs) without adding special support from the schematics themselves. It also makes schematics hermetic which ensures reusability and safety.<\/p><p>The Tree is a data structure that contains a base (a set of files that already exists) and a staging area (a list of changes to be applied to the base). When making modifications, you don’t actually change the base, but add those modifications to the staging area. This is really powerful but can be tricky and will be further explored in a separate medium post.<\/p><p>The Tree that a schematic will receive can be anything. The Angular CLI will use a Tree representing the project on the drive to the first schematic it calls, but composed schematics could receive any Trees. The good news is that it doesn’t matter; the Tree represents your starting point.<\/p><h3>Creating your first Schematics<\/h3><p>First, make sure you have Node 6.9 or above installed. Next, install the Schematics command line tool globally:<\/p><pre>npm install -g @angular-devkit/schematics-cli<\/pre><p>This will install a schematics executable, which you can use to create a blank Schematics project:<\/p><pre>schematics blank --name=my-component<\/pre><p>Et voilà. The blank schematics either create a new project, or add a blank schematic to an existing project (it can be used for both). You can then cd into your new project, install your npm dependencies, and open your new collection using your favorite editor of choice:<\/p><pre>cd my-component<br>npm install<br>code . # or atom, webstorm, vi, ...<\/pre><h3>Collections<\/h3><p>Schematics Collections are sets of named schematics, that are published and installed by users. For example, the Angular team publishes and maintains the official @schematics/angular collection, which contains schematics like component, module and application.<\/p><p>In our case, our collection will only include the my-component schematic. You can look at the src/collection.json file, which contains the description of our collection:<\/p><pre>{<br>  &quot;$schema&quot;: &quot;../node_modules/@angular-devkit/schematics/collection-schema.json&quot;,<br>  &quot;schematics&quot;: {<br>    &quot;my-component&quot;: {<br>      &quot;description&quot;: &quot;A blank schematic.&quot;,<br>      &quot;factory&quot;: &quot;./my-component/index#myComponent&quot;<br>    }<br>  }<br>}<\/pre><p>The $schema key points to the JSON Schema defining this format. It is used by IDEs to do auto completion, tools for validation, and is entirely optional.<\/p><p>The important key is &quot;schematics&quot;, which describes the schematics included in this collection. In our example, we describe one schematic: my-component, it has a simple description and a factory field. The factory field uses a string reference to point to a JavaScript function; in our case the exported function myComponent in the file my-component/index.js. It represents the RuleFactory.<\/p><h3>Rules, Trees and Files<\/h3><p>A Rule is a function that takes a Tree and returns another Tree. Rules are the core of Schematics; they are the ones making changes to your projects, calling external tools, and implementing logic. RuleFactory, as the name implies, are functions that create a Rule.<\/p><p>Here’s the blank RuleFactory created so far:<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/14d96dc57b9bba909ce8605c0bd13713/href\">https://medium.com/media/14d96dc57b9bba909ce8605c0bd13713/href<\/a><\/iframe><p>This factory takes an options argument and returns a Rule that takes a Tree and returns it unchanged.<\/p><p>The options argument is an object that can be seen as the input of the factory. From the CLI, it is the command line arguments the user passed. From another schematic, it’s the options that were passed in by that schematic. A GUI tool could construct an options object from user or project inputs, for example.<\/p><p>In any case, this is always an object and can be typed as any. It can also be validated with a JSON Schema to make sure that the inputs have appropriate default and types. JSON Schemas will be looked at more closely in a later post.<\/p><p>In the meantime, let’s do something more interesting with our rule:<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f342d3ebbfd9b61f6191235267d3443c/href\">https://medium.com/media/f342d3ebbfd9b61f6191235267d3443c/href<\/a><\/iframe><p>With this new line, we’re creating a file in the root of the schematic’s Tree, named either after the name option (or &#39;hello&#39; by default), containing the string world. This might seem trivial for now, but there’s a lot going on here under the hood.<\/p><p>A Tree contains the files that your schematics should be applied on. It has a list of files, and contains metadata associated with the changes you want to apply. In our case, the only change being made is to create a new file. Trees are more complex than just being a filesystem equivalent, and will be explored more deeply in a later post, but for the moment you can see them as a collection of files and changes.<\/p><p>By default, the Angular CLI will pass the root of your Angular project as the Tree, but any schematic can pass in a different Tree to other schematics. You can create empty trees, scope a Tree to a directory of a parent Tree, merge two trees, or branch them (making a copy of it).<\/p><p>There are four methods that directly create a change in a Tree; create, delete, rename, and overwrite.<\/p><h3>Running Your New Schematics<\/h3><p>To run our example, you first need to build it, then use the schematics command line tool with the path to our schematic project’s directory as the collection. From the root of our project:<\/p><pre>npm run build<br># ... wait for build to finish<\/pre><pre>schematics .:my-component --name=test<br># ... see that a file is created in the root.<\/pre><p>Before looking further into what happens here, a word of warning; don’t worry, this time you did not actually create a file on your filesystem. This is because the schematics tool is in debug mode when using a path as the collection it should use. When in debugging (which can also be used with --debug=true), the default is also to run in dry run mode, which prevents the tool from actually creating files.<\/p><p>This can be changed using the argument --dry-run=false. But beware, this means that the changes will really happen on the filesystem. If you delete or overwrite a file, you might lose content you don’t want to. <strong>We suggest to be in a separate temporary directory when debugging schematics, and to disable dry runs only when necessary.<\/strong><\/p><p>You can also start npm run build -- -w in a separate terminal so it automatically rebuild your schematic project when a file changes.<\/p><h3>Debugging<\/h3><p>In order to debug your schematics, you need to run with node in debugging mode:<\/p><pre>node --inspect-brk $(which schematics) .:myComponent --name=test<\/pre><p>Another advantage of running in debug mode is that the schematics command line tool puts a break point directly before running your own schematic.<\/p><h3>Calling Another Schematic<\/h3><p>One of the great advantage of Schematics is in how easy they are to compose together. In our example, we’ll call the component schematic from the Angular collection to add a component to your application, then add a header to every TypeScript files added by the Schematic.<\/p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/30a5c7c7e65392818bcfd1578db84483/href\">https://medium.com/media/30a5c7c7e65392818bcfd1578db84483/href<\/a><\/iframe><p>Don’t forget to add @schematics/angular to your dependencies in your package.json!<\/p><p>A few things to note here. First, we are calling and returning chain() directly. chain() is a RuleFactory provided by the Schematics library that chain multiple rules together, waiting in between for the Rule to finish. There are other rule factories like this provided by the Schematic library, and we’ll go over them at a later moment.<\/p><p>Second, we’re using another RuleFactory called externalSchematic (it also has a sister factory called schematic). Schematics being rules, you might be tempted to simply import a schematic’s rule factory and create the rule yourself, then call it directly (or pass it to chain directly). <strong>Do not call other Schematics as <\/strong><strong>Rules directly.<\/strong> There is more logic to the externalSchematic (and schematic) rule factory than importing the schematic and running it. For example, validating the Schema and filling default values.<\/p><p>Finally, there are no good way for now to list files that were created or overwritten in a tree. Because Schematics was built to be hermetic, the Tree that you receive does not have local changes. Because of this, we have to go through all files.<\/p><h3>Using Angular CLI<\/h3><p>The best usage of Schematics for your users is currently through the Angular CLI. This means you should probably give it a try before publishing this to NPM. Here we will try to use our new myComponent schematic through the Angular CLI.<\/p><p>First, create an empty project with the CLI:<\/p><pre>ng new my-project<\/pre><p>Then in your new project, link the Schematics we just built:<\/p><pre>npm link $PATH_TO_SCHEMATIC_PROJECT<\/pre><p>Replace $PATH_TO_SCHEMATIC_PROJECT with the path to your project’s root. Note that users will install instead of linking, this is just to iterate faster locally while developing.<\/p><p>Once your schematic project is linked, you can use ng generate to call your schematics:<\/p><pre>ng generate my-component:my-component someName<\/pre><p>By default, if the schematic takes a name argument, the second argument of the generate command will be set to that name.<\/p><p>Voilà! This should be enough to get your users started. Please note that there’s also a default collection in the CLI configuration that you can set. For more information on the configuration, see the CLI wiki.<\/p><h3>Conclusion<\/h3><p>Just to recap what we learnt so far:<\/p><ol><li>How to use the Schematics CLI tool to create a new project.<\/li><li>How to use the Schematics CLI tool to debug our own schematic project.<\/li><li>How to use chain and externalSchematic rule factories to compose rules and call other schematics.<\/li><li>How to use the Angular CLI to call our schematics (for both debugging and usage purposes).<\/li><\/ol><p>In the next blog post, I’ll visit the Tree data structure a little deeper, as well as look at tasks, which can be used to call external processes in a smart and safe way.<\/p><p>Schematics is the first part of a greater effort with the Angular DevKit, which will comprise many other libraries in the future, and those efforts will be described in a separate post.<\/p><p>Cheers!<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dc1dfbc2a2b2\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\">Schematics — An Introduction<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "Stable AngularJS and Long Term Support",
      "link": "https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/7e077635ee9c"
      },
      "category": [
        "angular",
        "javascript",
        "angularjs",
        "front-end-development",
        "software-development"
      ],
      "creator": "Pete Bacon Darwin",
      "pubDate": "Fri, 26 Jan 2018 20:57:30 GMT",
      "updated": "2018-01-26T21:59:00.741Z",
      "encoded": "<p><strong>AngularJS<\/strong> is planning one more significant release, version 1.7, and on July 1, 2018 it will enter a 3 year Long Term Support period.<\/p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dZTUzApSBnybrynw9bwKVQ.png\" /><figcaption>AngularJS Panel at Angular Connect 2015<\/figcaption><\/figure><h3>Background<\/h3><p><a href=\"https://angularjs.org/\">AngularJS<\/a> is an extremely stable framework for building web applications, and has been used by millions of developers across the web. <a href=\"https://angular.io/\">Angular<\/a> is its successor and uses the same philosophies such as declarative templates and dependency injection.<\/p><p>Angular has been growing more than 5x faster than AngularJS did since its original release. In October of 2017, the user base of Angular passed 1 million developers (based on 30 day users to our documentation), and became larger than the user base of AngularJS. We have many exciting Angular releases planned in 2018 and beyond.<\/p><p>We understand that many developers are still using AngularJS, and that the migration process to Angular takes time and energy, but we also are aware that developers want clarity on the future AngularJS development plans.<\/p><h3>Schedule<\/h3><p>The team is currently working towards a release of AngularJS 1.7.0 and we will continue development of 1.7 through June 30, 2018. On July 1, we will enter a 3 year period of Long Term Support (LTS).<\/p><ul><li><strong>January 1 — June 30, 2018 <\/strong><a href=\"https://github.com/angular/angular.js/milestone/128\">AngularJS 1.7<\/a> Active Development<\/li><li><strong>July 1, 2018 — June 30, 2021 <\/strong>AngularJS 1.7 LTS Period<\/li><\/ul><p><strong>All AngularJS applications that work now, will continue to work in the future. <\/strong>All published versions of AngularJS, on <a href=\"https://www.npmjs.com/package/angular\">npm<\/a>, bower, <a href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.6/angular.min.js\">CDNs<\/a>, etc will continue to be available. Our data indicates that the majority of AngularJS developers are not adopting the latest version updates, so the transition to LTS will be inconsequential to those developers.<\/p><h3>AngularJS 1.7 development<\/h3><p><strong>After the release of 1.7.0 the team does not intend to merge any feature or fix that will require even a minor breaking change.<\/strong><\/p><p>After 1.7.0 we will continue to develop AngularJS, publishing patch releases, 1.7.1, 1.7.2 etc, through Jun 30, 2018. These releases will only include non-breaking change features and fixes to the framework.<\/p><p>If there is a feature or fix that you believe should land in AngularJS 1.7.0, please report it via an <a href=\"https://github.com/angular/angular.js/issues?utf8=%E2%9C%93&amp;q=is%3Aopen\">already open issue or PR<\/a>, or <a href=\"https://github.com/angular/angular.js/issues/new\">create a new issue<\/a>.<\/p><h3>Long Term Support<\/h3><p><strong>On July 1st 2018, we will enter a Long Term Support period for AngularJS<\/strong>.<\/p><p>At this time we will focus exclusively on providing fixes to bugs that satisfy at least one of the following criteria:<\/p><ul><li>A security flaw is detected in the 1.7.x branch of the framework<\/li><li>One of the major browsers releases a version that will cause current production applications using AngularJS 1.7.x to stop working<\/li><li>The jQuery library releases a version that will cause current production applications using AngularJS 1.7.x to stop working.<\/li><\/ul><h3>Continuing the journey<\/h3><p>The Angular team and community have benefited so much from the countless people in the community who have provided feedback, bug fixes, new features, educational resources, built amazing libraries, run awesome conferences, and created fantastic applications. Thank you!<\/p><p>We look forward to joining you on the next exciting part of our journey together on the <a href=\"https://angular.io\">Angular platform<\/a>.<\/p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7e077635ee9c\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c\">Stable AngularJS and Long Term Support<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    },
    {
      "title": "A Component Dev Kit for Angular",
      "link": "https://blog.angular.io/a-component-dev-kit-for-angular-9f06e3b4b3b4?source=rss----447683c3d9a3---4",
      "guid": {
        "@isPermaLink": "false",
        "#text": "https://medium.com/p/9f06e3b4b3b4"
      },
      "category": [
        "angular",
        "material-design",
        "javascript",
        "front-end-development",
        "software-development"
      ],
      "creator": "Jeremy Elbourn",
      "pubDate": "Tue, 23 Jan 2018 20:27:38 GMT",
      "updated": "2018-01-23T20:27:38.789Z",
      "encoded": "<p>Modern web development is all about components. Angular gives developers a way to define these discrete chunks of UI and then compose them into an application. We’ve built the Component Dev Kit (CDK) to provide high quality predefined behaviors for your components.<\/p><p>The Angular CDK gives developers solid, well-tested tools to add common interaction patterns with minimal effort. Whether you’re authoring a generic, reusable component library or building a domain-specific component for one app, the CDK can help you build what you need in less time with less code and fewer bugs. The CDK is also completely unopinionated when it comes to styling, making it easy to tailor your app to any visual language. Our ultimate goal is for all Angular component libraries to be able to take advantage of the CDK, reducing duplication of effort in solving these common problems.<\/p><h3>How did the CDK come to be?<\/h3><p>From the development of <a href=\"https://material.angular.io/\">Angular Material<\/a>, we saw that many components share common patterns. Some of the most clear-cut examples include:<\/p><ul><li>Creating a floating panel connected to some origin element (menu, select, autocomplete, tooltip)<\/li><\/ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/322/1*qFOMBsavI_uTM70-yDLGyw.gif\" /><figcaption>Several components need to open some floating panel, such as the mat-select pictured here.<\/figcaption><\/figure><ul><li>Navigating through a set of options via keyboard (menu, select, autocomplete, list)<\/li><li>Trapping of focus within a section of the page (dialog, sidenav)<\/li><li>Dynamically switching between multiple content views (tabs, stepper)<\/li><\/ul><p>Aware of these cross-cutting behaviors, we strove to make highly reusable building blocks for the Material Design components. Once these building blocks reached a satisfactory level of maturity, we refactored them out into @angular/cdk as a standalone library.<\/p><h3>What does the CDK contain?<\/h3><p>The CDK is broken up into subpackages that each cover a different area of responsibility. While <a href=\"https://material.angular.io/cdk/categories\">the full set of features can be found in the documentation<\/a>, let’s look at some of the highlights:<\/p><h4>a11y — accessibility<\/h4><p><a href=\"https://material.angular.io/cdk/a11y/overview\">The a11y subpackage<\/a> contains a handful of utilities to help build more accessible components, particularly for users that interact with the web via <a href=\"https://en.wikipedia.org/wiki/Screen_reader\">screen-reader<\/a>. Screen-reader users primarily use a keyboard for all interactions, so the cdkFocusTrap directive can help create modal workflows common to dialogs or pop-ups. Status updates and notifications can also be problematic for users that can’t see a screen, so the LiveAnnouncer service can be used to surface this important information in a non-visual way.<\/p><h4>bidi — bidirectional text<\/h4><p>The BidiModule from <a href=\"https://material.angular.io/cdk/bidi/overview\">the bidi subpackage<\/a> provides a common pattern for all components to get and respond to changes to the current <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir\">LTR / RTL dir<\/a> of the page. With this module included in your app, each component can inject the Directionality service to read the current direction and to subscribe to subsequent updates.<\/p><h4>overlay<\/h4><p>In Angular Material, our most commonly used interaction pattern is the floating overlay panel. This is the core of the menu, select, dialog, snack-bar, autocomplete, and tooltip. All of these components are built on top of <a href=\"https://material.angular.io/cdk/overlay/overview\">the CDK’s overlay subpackage<\/a>. At a high level, the Overlay service provides a simple API for creating panels. These panels are highly customizable, giving component authors control over sizing, positioning, scroll behavior, and appearance. Built-in configurations capture common scenarios for positioning (e.g., anchoring to another element) and for scrolling behavior (e.g. closing when a trigger scrolls off-screen). Users are not restricted to these built-in behaviors, though, and can customize the behavior with their own positioning and/or scrolling strategies.<\/p><h4>layout<\/h4><p><a href=\"https://material.angular.io/cdk/layout/overview\">The layout subpackage<\/a> offers BreakpointObserver, an Observable-based abstraction above <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\">the native <\/a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\">matchMedia function<\/a>. This helper lets you define a sequence of media-query breakpoints (e.g., Handset,Tablet,Desktop) so that your components can adapt to changes in screen size with clear, readable semantics.<\/p><h4>table<\/h4><p>On top of the helpers and utilities, the CDK also offers baseline components upon which more customized experiences can be constructed. <a href=\"https://material.angular.io/cdk/table/overview\">The <\/a><a href=\"https://material.angular.io/cdk/table/overview\">&lt;cdk-table&gt;<\/a> is an unopinionated, customizable data-table with a fully-templated API, dynamic columns, and an accessible DOM structure. This component acts as the core upon which anyone can build their own tailored data-table experience.<\/p><h3>Next up for the CDK<\/h3><p>With its first stable release in December 2017, the CDK is still a relatively young library, and we have big plans for its growth. Some of the major work includes:<\/p><ul><li><a href=\"https://github.com/angular/material2/pull/7984\">A brand new <\/a><a href=\"https://github.com/angular/material2/pull/7984\">&lt;cdk-tree&gt; component<\/a> that follows the patterns established by &lt;cdk-table&gt;.<\/li><li><a href=\"https://github.com/angular/material2/pull/9153\">A new and improved positioning strategy for overlays<\/a> that supports flexible sizing based on viewport size and robust logic for keeping panels on-screen.<\/li><li><a href=\"https://github.com/angular/material2/issues/8963\">Utilities and directives for drag-and-drop interactions<\/a>.<\/li><li><a href=\"https://github.com/angular/material2/pull/8844\">A dialog subpackage<\/a> to provide a baseline dialog that can be customized to any visual language.<\/li><li><a href=\"https://github.com/angular/material2/issues/5188\">&lt;cdk-svg&gt;<\/a> as an easy and generic way to inline SVGs for animation and styling.<\/li><\/ul><p>If you have a great idea for other additions to the CDK, let us know by <a href=\"https://github.com/angular/material2/issues\">filing an issue on our GitHub repo<\/a>. If you are the author of a component library and are interested in using the CDK, reach out to <a href=\"mailto:devrel@angular.io\">devrel@angular.io<\/a>.<\/p><h3>Learning more<\/h3><p>Get started with the CDK by adding @angular/cdk to your project with npm or yarn, then take a look at the documentation for each of the CDK behaviors and components at <a href=\"https://material.angular.io/cdk\">https://material.angular.io/cdk<\/a>.<\/p><p>If you want to learn even more about the Angular CDK, check out some of these additional resources:<\/p><ul><li>My own talk from AngularMIX, <em>Angular CDK: The Component Dev Kit<\/em> (<a href=\"https://docs.google.com/presentation/d/1inxmh3WKTVUmpqGfupkxjR9klysIVvlkRnA81ByBqbk/view?slide=id.p#slide=id.p\">slides<\/a>) (<a href=\"https://www.youtube.com/watch?v=kYDLlfpTLEA\">video<\/a>), has an overview of the CDK and runs through a live demo of creating a color-picker component from scratch.<\/li><li>Team member <a href=\"https://github.com/crisbeto\">crisbeto@<\/a> put together a <a href=\"https://docs.google.com/presentation/d/1inxmh3WKTVUmpqGfupkxjR9klysIVvlkRnA81ByBqbk/preview?slide=id.g26df410828_0_122\">collection of CDK examples in plunker<\/a>.<\/li><li>Dominic Elm from Thoughtram has a great write-up on <a href=\"https://blog.thoughtram.io/angular/2017/11/20/custom-overlays-with-angulars-cdk.html\">creating custom overlays using @angular/cdk<\/a>.<\/li><li>Angular team member Andrew Seguin and long-time contributor Erin Coughlan gave a talk at Angular Connect that dives into the details of the CDK data-table (<a href=\"https://docs.google.com/presentation/d/1WwPmEk6DUAvxUSuilRUB8lOg2w_1PYKv3BxMrv5ZVmA/view\">slides<\/a>) (<a href=\"https://www.youtube.com/watch?v=n744pyab4Pc\">video<\/a>), including a live demo.<\/li><\/ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9f06e3b4b3b4\" width=\"1\" height=\"1\"><hr><p><a href=\"https://blog.angular.io/a-component-dev-kit-for-angular-9f06e3b4b3b4\">A Component Dev Kit for Angular<\/a> was originally published in <a href=\"https://blog.angular.io\">Angular Blog<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>"
    }
  ]
}
