/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */


/**
 * This is a starting point where we declare the maps of themes and globally available functions/mixins
 */

@import 'core/mixins';
@import 'core/functions';
@import 'core/breaking-notice';

$nb-enabled-themes: () !global;
$nb-enable-css-custom-properties: false !global !default;

$nb-themes: () !global;
$nb-themes-non-processed: () !global;
$nb-themes-export: () !global;

@function nb-theme($key) {
  @return map-get($theme, $key);
}

@function nb-get-value($theme, $key, $value) {
  @if (type-of($value) == 'string') {
    $tmp: map-get($theme, $value);

    @if ($tmp != null) {
      @if ($nb-enable-css-custom-properties) {
        @return var(--#{$value});
      } @else {
        @return nb-get-value($theme, $value, $tmp);
      }
    }
  }

  @return map-get($theme, $key);
}

@function convert-to-css-custom-properties($variables) {
  $result: ();
  @each $var, $value in $variables {
    $result: map-set($result, $var, unquote('var(--#{$var})'));
  }

  @return $result;
}

@function set-global-theme-vars($theme, $theme-name) {
  $theme: $theme !global;
  $theme-name: $theme-name !global;
  @if ($nb-enable-css-custom-properties) {
    $theme: convert-to-css-custom-properties($theme) !global;
  }
  @return $theme;
}

@function create-colors-palette($theme) {
  $color-keys: (
    color-primary: 20deg,
    color-success:  20deg,
    color-info: -10deg,
    color-warning: 10deg,
    color-danger: -20deg,
  );

  @each $key, $degree in $color-keys {
    $color: map-get($theme, $key);

    $color-300: tint($color, 14%);
    $color-400: adjust-hue($color, $degree);
    $color-200: tint($color-400, 14%);
    $color-600: mix($color-400, $color);
    $color-700: shade($color, 14%);
    $color-800: shade($color-600, 14%);

    $theme: map-set($theme, #{$key}-300, $color-300);
    $theme: map-set($theme, #{$key}-200, $color-200);
    $theme: map-set($theme, #{$key}-400, $color-400);
    $theme: map-set($theme, #{$key}-600, $color-600);
    $theme: map-set($theme, #{$key}-700, $color-700);
    $theme: map-set($theme, #{$key}-600, $color-800);
  }
  @return $theme;
}

@function nb-register-theme($theme, $name, $default: null) {

  $theme-data: ();


  @if ($default != null) {

    $theme: map-merge(map-get($nb-themes-non-processed, $default), $theme);
    $nb-themes-non-processed: map-set($nb-themes-non-processed, $name, $theme) !global;

    $theme-data: map-set($theme-data, data, $theme);
    $nb-themes-export: map-set($nb-themes-export, $name, map-set($theme-data, parent, $default)) !global;

  } @else {
    $nb-themes-non-processed: map-set($nb-themes-non-processed, $name, $theme) !global;

    $theme-data: map-set($theme-data, data, $theme);
    $nb-themes-export: map-set($nb-themes-export, $name, map-set($theme-data, parent, null)) !global;
  }

  $theme-parsed: ();
  @each $key, $value in $theme {
    $theme-parsed: map-set($theme-parsed, $key, nb-get-value($theme, $key, $value));
  }

  // enable right away when installed
  $theme-parsed: set-global-theme-vars($theme-parsed, $name);
  @return map-set($nb-themes, $name, $theme-parsed);
}

@function get-enabled-themes() {
  $themes-to-install: ();

  @if (length($nb-enabled-themes) > 0) {
    @each $theme-name in $nb-enabled-themes {
      $themes-to-install: map-set($themes-to-install, $theme-name, map-get($nb-themes, $theme-name));
    }
  } @else {
    $themes-to-install: $nb-themes;
  }

  @return $themes-to-install;
}

@mixin install-css-variables($theme-name, $variables) {
  .nb-theme-#{$theme-name} {
    @each $var, $value in $variables {
      --#{$var}: #{$value};
    }
  }
}

@mixin nb-install-component-with-css-props() {
  @warn '`nb-install-component` is unnecessary with css-variables. Deprecated and will be removed as of 5.0.0';
  :host {
    @content;
  }
}

@mixin nb-install-component-with-scss-vars() {
  $themes-to-install: get-enabled-themes();

  @each $theme-name, $theme in $themes-to-install {
    /*
      :host can be prefixed
      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441

      We have to use :host insted of :host-context($theme), to be able to prefix theme class
      with something defined inside of @content, by prefixing &.
      For example this scss code:
        .nb-theme-default {
          .some-selector & {
            ...
          }
        }
      Will result in next css:
        .some-selector .nb-theme-default {
          ...
        }

      It doesn't work with :host-context because angular splitting it in two selectors and removes
      prefix in one of the selectors.
    */
    .nb-theme-#{$theme-name} :host {
      $theme: set-global-theme-vars($theme, $theme-name);
      @content;
    }
  }
}

// TODO: we hide :host inside of it which is not obvious
@mixin nb-install-component() {

  @if ($nb-enable-css-custom-properties) {

    @include nb-install-component-with-css-props() {
      @content;
    }

  } @else {

    @include nb-install-component-with-scss-vars() {
      @content;
    }
  }
}

@mixin nb-for-theme($name) {
  @if ($theme-name == $name) {
    @content;
  }
}

// Add content for theme into a list of themes
@mixin nb-for-themes($names...) {
  @each $name in $names {
    @include nb-for-theme($name) {
      @content;
    }
  }
}

@mixin nb-except-theme($name) {
  @if ($theme-name != $name) {
    @content;
  }
}

// Add content except for theme into a list of themes
@mixin nb-except-for-themes($names...) {
  @each $name in $names {
    @include nb-except-theme($name) {
      @content;
    }
  }
}

// TODO: another mixing for the almost same thing
@mixin nb-install-root-component() {
  @warn '`nb-install-root-component` is deprecated, replace with `nb-install-component`, as `body` is root element now';

  @include nb-install-component() {
    @content;
  }
}

@mixin nb-install-global-with-css-props() {
  $themes-to-install: get-enabled-themes();

  $theme: map-get($themes-to-install, 'default');
  $theme: set-global-theme-vars($theme, 'default');
  @content;

  @each $theme-name, $theme in $themes-to-install {
    @include install-css-variables($theme-name, $theme);
  }
}

@mixin nb-install-global-with-scss-vars() {
  $themes-to-install: get-enabled-themes();

  @each $theme-name, $theme in $themes-to-install {
    .nb-theme-#{$theme-name} {
      $theme: set-global-theme-vars($theme, $theme-name);
      @content;
    }
  }

  $temp: nb-breaking-notice-show($theme);
}

@mixin nb-install-global() {
  @if ($nb-enable-css-custom-properties) {
    @include nb-install-global-with-css-props() {
      @content;
    }
  } @else {
    @include nb-install-global-with-scss-vars() {
      @content;
    }
  }
}

@function nb-get-statuses() {
  @return 'primary', 'success', 'warning', 'danger', 'info';
}

@function nb-get-sizes() {
  @return 'tiny', 'small', 'medium', 'large', 'giant';
}
